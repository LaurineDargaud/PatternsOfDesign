!! Understanding Visitors
@cha:visitors

In a previous chapter we built a simple mathematical expression interpreter.
You were able to build an expression such as (3 + 4) * 5 and then ask the interpreter to compute its value.
The expression trees are similar to the ones that are used to manipulate programs. For example, compilers and code refactorings as offered in Pharo and many modern IDEs are doing such manipulation with trees representing code.
In this chapter we will introduce Visitors. A Visitor is a way to represent an action on a structure (often a tree).
The action can be complex and its embeds its own state and behavior which would be otherwise mixed with the structure.

We will build two simple visitors that evaluate and print an expression.
Let us start with the previous situation.

!!! Existing situation: expression trees

*@fig:ExpressionWithEvaluateWith* shows the simple hierarchy of expressions that we developed in a previous chapter.

+A simple hierarchy of expressions.>file://figures/ExpressionsHierarchyFinal.pdf|width=70|label=fig:ExpressionWithEvaluateWith+





!!! Conclusion

say something :)